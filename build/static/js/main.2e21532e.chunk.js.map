{"version":3,"sources":["utils/cache.js","hooks/useRequest.js","utils/getRandomIntInclusive.js","components/Quotes.js","components/Clock.js","utils/getMantra.js","utils/getGreeting.js","components/Greeting.js","components/MainScreen.js","components/Image.js","components/Background.js","components/Overlay.js","components/Error.js","components/App.js","serviceWorker.js","index.js"],"names":["readFromCache","url","JSON","parse","localStorage","getItem","writeToCache","data","setItem","stringify","useRequest","useCache","useState","setData","error","setError","getFreshData","a","axios","get","response","getCachedData","cachedData","useEffect","loading","getRandomIntInclusive","min","max","Math","ceil","floor","random","Container","styled","div","Text","Link","Quotes","quotes","author","text","key","href","target","rel","renderQuote","length","Time","Clock","date","Date","now","timer","setTimer","timerID","setInterval","tick","clearInterval","getHours","getMinutes","mantras","getGreeting","time","index","currentMantra","Greet","MainScreen","Greeting","Img","img","Image","src","Background","photo","setPhoto","fadeIn","keyframes","Layer","Overlay","h1","Error","GlobalStyle","createGlobalStyle","reset","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e21532e.chunk.js","sourcesContent":["const readFromCache = (url) => JSON.parse(localStorage.getItem(url)) || null\n\nconst writeToCache = (url, data) =>\n  localStorage.setItem(url, JSON.stringify(data))\n\nexport { readFromCache, writeToCache }\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-unused-expressions */\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { readFromCache, writeToCache } from '../utils/cache'\n\nconst useRequest = (url, useCache = true) => {\n  const [data, setData] = useState()\n  const [error, setError] = useState()\n\n  const getFreshData = async () => {\n    try {\n      const { data: response } = await axios.get(url)\n      useCache && writeToCache(url, response)\n      setData(response)\n    } catch (e) {\n      setError(e)\n    }\n  }\n\n  const getCachedData = () => {\n    const cachedData = readFromCache(url)\n    cachedData && setData(cachedData)\n  }\n\n  useEffect(() => {\n    useCache && getCachedData()\n    getFreshData()\n  }, [])\n\n  const loading = !data && !error\n\n  return {\n    data,\n    loading,\n    error\n  }\n}\n\nexport default useRequest\n","/* eslint-disable no-param-reassign */\nconst getRandomIntInclusive = (min, max) => {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport default getRandomIntInclusive\n","/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react/button-has-type */\n/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\nimport useRequest from '../hooks/useRequest'\nimport getRandomIntInclusive from '../utils/getRandomIntInclusive'\n\nconst Container = styled.div`\n  width: 500px;\n  height: auto;\n  position: fixed;\n  left: 50%;\n  transform: translateX(-50%);\n  bottom: 0;\n  color: rgba(255, 255, 255, 0.9);\n  z-index: 1;\n  text-shadow: 2px 3px 4px rgba(0, 0, 0, 0.3);\n`\n\nconst Text = styled.div`\n  padding-bottom: 5px;\n  text-align: center;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: calc(10px + 1vmin);\n  line-height: 1.1;\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: translateY(-18px);\n  }\n`\n\nconst Link = styled.a`\n  color: rgba(255, 255, 255, 0.9);\n  text-decoration: none;\n  font-size: calc(8px + 1vmin);\n\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 0s linear 0.5s, opacity 0.3s;\n\n  ${Container}:hover & {\n    visibility: visible;\n    opacity: 0.8;\n    transition: visibility 0s linear 0s, opacity 0.3s;\n  }\n`\n\nconst url = 'https://type.fit/api/quotes'\n\nconst renderQuote = ({ author, text }) => {\n  return (\n    <div key={author + text}>\n      <p>\"{text}\"</p>\n      <Link\n        href={`https://en.wikipedia.org/wiki/${author}`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {author || 'Unknown'}\n      </Link>\n    </div>\n  )\n}\n\nconst Quotes = () => {\n  const { data: quotes, loading, error } = useRequest(url)\n\n  return (\n    <Container>\n      <Text>\n        {loading && <p>Loading...</p>}\n        {error && <p>There was an error!</p>}\n        {quotes && renderQuote(quotes[getRandomIntInclusive(1, quotes.length)])}\n      </Text>\n    </Container>\n  )\n}\n\nexport default Quotes\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nconst Time = styled.div`\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1050%;\n  letter-spacing: -5px;\n  line-height: 1;\n  color: white;\n  user-select: none;\n  text-align: center;\n  text-shadow: 2px 3px 4px rgba(0, 0, 0, 0.3);\n\n  position: fixed;\n  top: 47%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n`\n\nconst Clock = () => {\n  const [timer, setTimer] = useState({ date: new Date(Date.now()) })\n\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 1000)\n    return () => {\n      clearInterval(timerID)\n    }\n  }, [])\n\n  const tick = () => setTimer({ date: new Date(Date.now()) })\n\n  return (\n    <Container>\n      <Time>\n        {timer.date.getHours()}:{timer.date.getMinutes() < 10 ? '0' : ''}\n        {timer.date.getMinutes()}\n      </Time>\n    </Container>\n  )\n}\n\nexport default Clock\n","import getRandomIntInclusive from './getRandomIntInclusive'\n\nexport const mantras = [\n  \"Don't let your dreams be dreams.\",\n  'Yesterday you said tomorrow.',\n  'So just do it.',\n  'Make your dreams come true.',\n  'Just do it.',\n  'Nothing is impossible.',\n  \"You're not going to stop.\",\n  'What are you waiting for?',\n  'Yes you can.',\n  'Stop giving up.',\n  'You will win.',\n  'You will succeed.',\n  'Aim high.',\n  'Believe in Yourself!',\n  'Never give up!',\n  'It starts with You!',\n  'Never let them change you.',\n  'Trust your talents.',\n  'Trust yourself.',\n  'Well done.',\n  'Baby steps.',\n  'Be grateful.',\n  'Life happens now.',\n  'Live simply.',\n  'Be the change.',\n  'Make it count.',\n  'Enjoy the process.',\n  'Be fearless.',\n  'Focus on the journey.',\n  'Progress, not perfection.',\n  'You are not alone.',\n  'Value yourself.',\n  'Breathe.',\n  'Stop procrastinate.',\n  'There is a way.',\n  'Be honest.',\n  'Create everyday.',\n  'You are enough.',\n  'Modest life.',\n  'Everyday is a fresh start.',\n  'Now is the moment.',\n  'Lead by example.',\n  'Walk the talk.',\n  'Good thoughts.',\n  'Simple life.',\n  'Work smart.',\n  'Look for opportunities.',\n  'Positive mindset.',\n  'Be calm.',\n  'Tomorrow is another try.',\n  'Simple. Modest. Life.',\n  'Be unstoppable.',\n  'You are well.',\n  'Create opportunities.'\n]\n\nexport const getMantra = (dictionary) => {\n  const randomNumber = getRandomIntInclusive(1, mantras.length)\n  return dictionary[randomNumber]\n}\n","import { mantras, getMantra } from './getMantra'\nimport getRandomIntInclusive from './getRandomIntInclusive'\n\nconst getGreeting = (time) => {\n  let index = null\n  if (time <= 12) {\n    index = 0\n  } else if (time <= 17) {\n    index = 1\n  } else {\n    index = 2\n  }\n\n  const greeting = ['Good morning.', 'Good afternoon.', 'Good evening.']\n  const currentMantra = getMantra(mantras)\n  const randomNum = getRandomIntInclusive(1, 6)\n\n  return randomNum <= 3 ? greeting[index] : currentMantra\n}\n\nexport default getGreeting\n","import React from 'react'\nimport styled from 'styled-components'\nimport getGreeting from '../utils/getGreeting'\n\nconst Container = styled.div`\n  width: 100%;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n`\n\nconst Text = styled.div`\n  width: 100%;\n  color: white;\n  text-align: center;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 350%;\n  font-weight: 500;\n  line-height: normal;\n  user-select: none;\n  text-shadow: 2px 3px 4px rgba(0, 0, 0, 0.3);\n\n  position: fixed;\n  top: 51%;\n  left: 50%;\n  transform: translate(-50%, 60%);\n`\n\nconst Greet = () => (\n  <Container>\n    <Text>{getGreeting(new Date(Date.now()).getHours())}</Text>\n  </Container>\n)\n\nexport default Greet\n","/* eslint-disable react/prop-types */\nimport React from 'react'\n\nimport Quotes from './Quotes'\nimport Clock from './Clock'\nimport Greeting from './Greeting'\n\nconst MainScreen = () => (\n  <div>\n    <Clock />\n    <Greeting />\n    <Quotes useCache />\n  </div>\n)\n\nexport default MainScreen\n","import React from 'react'\nimport styled from 'styled-components'\n/* eslint react/prop-types: 0 */\n\nconst Img = styled.img`\n  width: 100%;\n  height: 100%;\n  vertical-align: bottom;\n  object-fit: cover;\n  background-color: black;\n`\n\nconst Image = ({ src }) => <Img src={src} />\n\nexport default Image\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport Image from './Image'\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  position: absolute;\n  object-position: 50% 50%;\n  z-index: auto;\n  background-color: black;\n`\n\nconst Background = () => {\n  const [photo, setPhoto] = useState()\n\n  useEffect(() => {\n    const url = 'https://source.unsplash.com/collection/477172/1600x900/daily'\n    const getPhoto = () => {\n      setPhoto(url)\n    }\n    getPhoto()\n  }, [])\n\n  return (\n    <Container>\n      <Image src={photo} />\n    </Container>\n  )\n}\n\nexport default Background\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst fadeIn = keyframes`\n  50% {\n    opacity: 1;\n    z-index: 2;\n  }\n\n  100% {\n    opacity: 0;\n    z-index: 0;\n  }\n`\n\nconst Layer = styled.div`\n  display: block;\n  background-color: black;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  position: absolute;\n  z-index: 2;\n\n  animation: 1s ${fadeIn} ease forwards;\n`\n\nconst Overlay = () => <Layer />\n\nexport default Overlay\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  width: 100%;\n  text-align: center;\n  position: relative;\n  z-index: 1;\n`\nconst Text = styled.h1`\n  width: 100%;\n  color: white;\n  text-align: center;\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 350%;\n  font-weight: 500;\n  line-height: normal;\n  user-select: none;\n  text-shadow: 2px 3px 4px rgba(0, 0, 0, 0.3);\n\n  position: fixed;\n  top: 37%;\n  left: 50%;\n  transform: translate(-50%, 60%);\n`\n\nconst Error = () => (\n  <Container>\n    <Text>Oops! Page not found!</Text>\n  </Container>\n)\n\nexport default Error\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { createGlobalStyle } from 'styled-components'\nimport reset from 'styled-reset'\n\nimport MainScreen from './MainScreen'\nimport Background from './Background'\nimport Overlay from './Overlay'\nimport Error from './Error'\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset};\n  background-color: black;\n`\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n    <Overlay />\n    <Background />\n    <Switch>\n      <Route path=\"/\" component={MainScreen} exact />\n      <Route component={Error} />\n    </Switch>\n  </>\n)\n\nexport default App\n","/* eslint-disable max-len */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}